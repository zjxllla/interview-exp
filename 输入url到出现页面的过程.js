1. 解析输入的url
2. DNS解析：
    先检查浏览器dns缓存
    再检查操作系统dns缓存
    再检查本地hosts文件
    检查路由器dns缓存
    如果都没有，则向本地DNS服务器发起请求 （递归查询）
    本地dns向根、顶级、权威、等级域名服务器发起请求 （迭代查询）
    最终得到ip地址
3. TCP连接
    三次握手：
    SYN：请求创建连接 ACK：确认接受 seq：序列号 ack：下一个序列号
        客户端发送SYN包及序列号
        服务器返回SYN+ACK包及序列号
        客户端返回ACK包及序列号
    如果https，还需要进行TLS握手。
    TLS握手：
        客户端发送客户端随机数、支持的加密套件、压缩方法等信息
        服务器返回服务器随机数、确认加密套件、压缩方法等信息
        客户端返回确认信息
        生成对称密钥，进行通信，详见 TLS握手.js
   至此，连接建立

4. 缓存检查
       在发送http请求前，浏览器会先检查缓存
       强缓存：检查Cache-Control（1.1）及Expires（1.0）头信息，如果命中，则直接从缓存中读取资源，不会发送请求；否则进行协商缓存
   协商缓存：
       发送有If-Modified-Since:Last-Modified（1.0）的请求 或 有If-None-Match:Etag（1.1）的请求
       判断资源是否有更新，如果没有更新则会返回304，直接从缓存中读取资源；否则返回200，重新获取资源
   

6. 浏览器渲染
        主        主                     主      主     主    主      合成  gpu    gpu 
      产生任务->解析html（解析css、js）->样式计算->布局->分层->绘制指令->分块->光栅化->画

      当拿到资源后，会产生一个渲染任务
      这个渲染任务会被放入渲染主线程的消息队列中
      在浏览器事件循环机制的作用下，渲染主线程从消息队列中取出渲染任务开始执行。
      -首先解析html，在解析前，为了提升解析效率，会开启一个预解析线程，预先下载外部的css和js
       如果主线程解析到link标签，此时css文件还没有下载完成，主线程不会等待，而是继续解析html，因为css的下载和解析在预解析线程中进行
       当主线程解析到script标签时，会暂停解析html，等待js文件下载和执行完成，因为js可能会修改dom树，从而影响页面的渲染
       这一步完成后，会得到DOM树及cssom树
      -下来进行样式计算
       主线程遍历dom树，计算每个节点的样式，这个过程中很多预设值会变成绝对值，如em->px
       这一步完成后，会得到带有样式的dom树
      -接下来是布局
       主线程遍历dom树，计算每个节点的位置和大小
       这一步完成后，会得到布局树，布局树往往和dom树不同，因为一些节点会被隐藏或伪元素
      -然后是分层
       主线程对布局树进行分层，将不同的节点分到不同的层中
       这样如果将来某个节点发生变化，只会影响该节点所在的层，不会影响其他层
      -然后是绘制指令
       主线程为每个层单独产生绘制指令，描述该层怎么绘制
      -得到绘制指令后，主线程会将绘制指令提交给合成线程
       合成线程会根据绘制指令对每个层进行分块，划分更小的区域（会启动多个线程来完成分块）
      -然后是光栅化
       合成线程会将块信息交给gpu线程进行光栅化，将块转换为位图
      -最后是画
       合成线程将位图生成指引信息，交给gpu线程进行渲染。

       transform及opacity等发生在合成线程，不会阻塞渲染主线程，因此可以用来进行性能优化

